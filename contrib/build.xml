<!-- ===========================================================================


Introduction
============

To Be Written


Installing the build tools
==========================

For instructions on JDOM use of Ant see the build.xml find in the "jdom"
module (../jdom).

Build targets
=============

These are the meaningful targets for this build file:

 - package [default] -> creates ./build/jdom-contrib.jar
 - compile -> compiles the contributed source code
 - samples -> compiles the contributed samples
 - javadoc -> generates the API documentation in ./build/javadocs
 - clean -> restores the distribution to its original and clean state

-->

<project default="package" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>

    <!--
      Give user a chance to override without editing this file
      (and without using -D arguments each time they build).
      The build properties a user is likely to override include:
        - jdom.dir           The directory where the JDOM distribution is
                             installed. Defaults to ../jdom
        - jdom.lib.dir       The directory where to look for the default JAR
                             files.  Defaults to ${jdom.dir}/lib
        - jdom-core.jar      The JAR containing the core JDOM API.
                             Defaults to ${jdom.lib}/build/jdom.jar
        - xml-apis.jar       The JAR containing the DOM, SAX and JAXP classes.
                             Defaults to ${jdom.lib.dir}/xml-apis.jar
        - parser.jar         The JAR containing the XML parser to use.
                             Defaults to ${jdom.lib.dir}/xerces.jar
        - jakarta-regexp.jar The JAR containing the Jakarta RegExp classes.
                             Defaults to ${lib.dir}/jakarta-regexp-1.1.jar

      Note that any build.properties files located in the user home directory
      (${user.home}) and in the JDOM directory (${jdom.dir}) are also taken
      into account. Thus, JAR settings defined in these files do not need to
      be redefined in the local build.properties.
     -->
    <property file="${user.home}/jdom.build.properties" />
    <property file="${basedir}/build.properties" />

    <!-- JDOM home & libraries -->
    <property name="jdom.dir"           value="../core"/>
    <property name="jdom.lib.dir"       value="${jdom.dir}/lib"/>
    <property name="jdom.build.dir"     value="${jdom.dir}/build"/>

    <!-- Load custom build configuration from JDOM home too. -->
    <property file="${jdom.dir}/build.properties" />

    <property name="Name" value="JDOM Contributions"/>
    <property name="version" value="1.1.2-snap"/>
    <property name="name" value="jdom-contrib-${version}"/>
    <property name="year" value="2011"/>

    <echo message="----------- ${Name} ${version} ------------"/>

    <property name="compile.debug"       value="true" />
    <property name="compile.optimize"    value="true" />
    <property name="compile.target"      value="1.8" />
    <property name="compile.source"      value="1.8" />
    <property name="compile.deprecation" value="true" />

    <property name="src.dir" value="./src/java"/>
    <property name="samples.dir" value="./samples"/>
    <property name="samples.dest" value="./build/samples"/>
    <property name="lib.dir" value="./lib"/>
    <property name="packages" value="org.jdom.*"/>

    <property name="build.dir" value="./build"/>
    <property name="build.src" value="./build/src"/>
    <property name="build.dest" value="./build/classes"/>
    <property name="build.javadocs" value="./build/apidocs"/>

    <property name="dist.root" value="./dist"/>
    <property name="dist.dir" value="${dist.root}/${name}-${version}"/>

    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>
    <filter token="log" value="true"/>
    <filter token="verbose" value="true"/>

    <!-- Default JAR libraries -->
    <property name="xml-apis.jar"       value="${jdom.lib.dir}/xml-apis.jar"/>
    <property name="parser.jar"         value="${jdom.lib.dir}/xerces.jar"/>
    <property name="jdom-core.jar"      value="${jdom.build.dir}/jdom-${version}.jar"/>
    <property name="jdom-contrib"       value="${build.dest}"/>

    <property name="jakarta-regexp.jar" value="${lib.dir}/jakarta-regexp-1.1.jar"/>
    <property name="iso-relax-api.jar"  value="${lib.dir}/isorelax.jar"/>

    <!-- Compilation class path -->
    <path id="compile.class.path">
      <pathelement location="${xml-apis.jar}"/>
      <pathelement location="${parser.jar}"/>
      <pathelement location="${jdom-core.jar}"/>
      <pathelement location="${jakarta-regexp.jar}"/>
      <pathelement location="${iso-relax-api.jar}"/>

      <!-- We used to include the CLASSPATH environment variable in
           compilation path as it might contain the path to the JDK 1.1
           collections.  That's not needed anymore.  We'll keep it here
           in case there's a future need to include the CLASSPATH.
      <pathelement path="${java.class.path}" />
       -->
    </path>

    <path id="run.class.path">
      <path refid="compile.class.path"/>
      <pathelement location="${jdom-contrib}"/>
    </path>

  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="JDOM Contributions Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   package  --> generates the jdom-contrib.jar file (default)"/>
    <echo message="   compile  --> compiles the contributed source code"/>
    <echo message="   samples  --> compiles the contributed samples"/>
    <echo message="   javadoc  --> generates the API documentation (java 1.2 only)"/>
    <echo message="   clean    --> restores the distribution to its clean state"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the source code                                            -->
  <!-- =================================================================== -->
  <target name="prepare-src" depends="prepare">
    <!-- create directories -->
    <mkdir dir="${build.dest}"/>

    <!-- copy src files -->
    <copy todir="${build.src}"
          filtering="yes">
      <fileset dir="${src.dir}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the example code                                           -->
  <!-- =================================================================== -->
  <target name="prepare-samples" depends="prepare">
    <!-- create directories -->
    <mkdir dir="${samples.dest}"/>

    <!-- copy src files -->
    <copy todir="${samples.dest}"
          filtering="yes">
          <fileset dir="${samples.dir}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare-src">
    <!-- Compile the JTree demo only if the Swing classes are found -->
    <available property="swing.present"
               classname="javax.swing.tree.DefaultMutableTreeNode"
               classpathref="compile.class.path" />

    <!-- Compile the schema package only if the JARV classes are found -->
    <available property="jarv.present"
               classname="org.iso_relax.verifier.Verifier"
               classpathref="compile.class.path" />

    <javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${compile.debug}"
           optimize="${compile.optimize}"
           target="${compile.target}"
           source="${compile.source}"
           deprecation="${compile.deprecation}">
      <exclude name="**/*JTree*.java" unless="swing.present" />
      <exclude name="**/schema/*.java" unless="jarv.present" />

      <classpath refid="compile.class.path"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the samples directory                                      -->
  <!-- =================================================================== -->
  <target name="samples" depends="prepare-samples,compile">
    <javac srcdir="${samples.dest}"
           destdir="${samples.dest}"
           debug="${compile.debug}"
           optimize="${compile.optimize}"
           target="${compile.target}"
           source="${compile.source}"
           deprecation="${compile.deprecation}">

      <classpath refid="run.class.path"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the class package                                           -->
  <!-- =================================================================== -->
  <target name="package" depends="clean,compile,javadoc">
    <fixcrlf srcdir="." includes="**/*.bat" excludes="build*.*" eol="crlf"/>
    <fixcrlf srcdir="." includes="**/*.sh"  excludes="build*.*" eol="lf"/>
    <jar jarfile="${build.dir}/${name}.jar"
         basedir="${build.dest}"
         includes="org/**"/>
    <jar jarfile="${build.dir}/${name}-sources.jar"
         basedir="${build.src}" />
    <jar jarfile="${build.dir}/${name}-javadoc.jar"
         basedir="${build.javadocs}" />
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadoc" depends="prepare-src">
    <mkdir dir="${build.javadocs}"/>
    <javadoc destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} Jason Hunter, Brett McLaughlin. All Rights Reserved.">

      <packageset dir="${build.src}">
        <exclude name="**/doc-files" />
      </packageset>

      <classpath refid="run.class.path"/>
    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete dir="${build.dir}"/>
    <delete file="${docs.dir}/changes.xml"/>
    <delete file="${docs.dir}/todo.xml"/>
    <delete file="${docs.dir}/book.xml"/>
  </target>

  <target name="distclean" depends="clean">
    <delete dir="${dist.root}"/>
    <delete file="${Name}-${version}.tar.gz"/>
    <delete file="${Name}-${version}.tar"/>
    <delete file="${Name}-${version}.zip"/>
  </target>

    <!-- =================================================================== -->
    <!-- Master targets                                                      -->
    <!-- =================================================================== -->
	<target name="master" depends="distclean,package" 
		description="Called from master build.xml" >
	</target>
	
	
</project>

<!-- End of file -->
